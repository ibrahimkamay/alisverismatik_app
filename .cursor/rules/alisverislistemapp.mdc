# Alışverişmatik Uygulaması Geliştirme Kuralları (v1.3 - UI Tasarım Sistemi Eklendi)

Bu dosya, "Alışverişmatik" adlı React Native uygulamasını geliştirirken Cursor AI'ın takip etmesi gereken kuralları, UI tasarım sistemini, navigasyon mimarisini, veri yönetimi mimarisini ve en iyi pratikleri içerir.

## 1. Genel Proje Yapısı ve Mimarisi

- **Uygulama Adı:** Alışverişmatik
- **Ana Teknolojiler:** React Native (Expo), TypeScript, Supabase
- **Styling:** **NativeWind** (Tailwind CSS for React Native).
- **Klasör Yapısı:**
  - `src/app`: Ekranlar ve navigasyon yapısı.
  - `src/components`: Tekrar kullanılabilir, genel bileşenler.
  - `src/services`: Tüm Supabase ve API iletişiminin yönetildiği yer.
  - `src/hooks`: `services` katmanını kullanarak veri çeken ve state yönetimi yapan özel hook'lar.
  - `src/lib`: Harici servis ve kütüphane konfigürasyonları (`supabase.ts` vb.).
  - `src/contexts`: Global state yönetimi için Context'ler (örn: `AuthContext`).
  - `src/types`: Global TypeScript tipleri ve Supabase tipleri.

### 1.1. Navigasyon Mimarisi
- **`BottomTabNavigator`:**
  - **Sekmeler:** Listelerim (`ListsScreen`), Yeni Liste (Orta Buton -> Modal), Profil (`ProfileScreen`).
- **`StackNavigator`:**
  - `BottomTabNavigator`'ı ve detay ekranlarını (`ListDetailScreen` vb.) içerir.

---

## 2. Tasarım Sistemi ve UI Kuralları (NativeWind)

Bu bölüm, uygulamanın görsel kimliğini tanımlar.

### 2.1. Genel Felsefe
- **Stil:** Temiz, modern, minimalist ve kullanıcı dostu.
- **Yapı:** Yuvarlatılmış kartlar, bol beyaz alan, yumuşak gölgeler ve sade ikonlar.

### 2.2. Renk Paleti ve `tailwind.config.js`
Tüm renkler `tailwind.config.js` dosyasında merkezi olarak tanımlanmalıdır.

```javascript
// tailwind.config.js
const colors = require('tailwindcss/colors');

module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: '#2b703b', // Ana Yeşil
          light: '#3a944e',   // Daha açık tonu
          dark: '#1e4f29',    // Daha koyu tonu
        },
        secondary: colors.blue,
        accent: colors.red,
        background: '#FFFFFF',
        textPrimary: colors.gray[800],
        textSecondary: colors.gray[500],
        card: '#FFFFFF',
        inputBg: colors.gray[100],
      },
    },
  },
  plugins: [],
}
```

### 2.3. Bileşen Stilleri (Component Styles)
Cursor AI'dan bileşen isterken bu sınıflar referans alınmalıdır.

- **Kartlar (Cards):**
  - **Sınıflar:** `bg-card p-4 rounded-xl shadow-sm`
  - **Açıklama:** Yumuşak gölgeli ve belirgin şekilde yuvarlatılmış köşeli.

- **Butonlar (Buttons):**
  - **Ana Buton:** `bg-primary active:bg-primary-dark text-white font-bold py-3 px-6 rounded-lg`
  - **Açıklama:** Büyük, dokunması kolay ve ana eylem renginde.

- **Input Alanları (Input Fields):**
  - **Sınıflar:** `bg-inputBg border border-gray-300 text-textPrimary text-base rounded-lg p-3 w-full focus:border-primary focus:ring-1 focus:ring-primary`
  - **Açıklama:** Sade, hafif gri arkaplanlı ve odaklandığında ana renkle vurgulanan.

- **Tipografi (Typography):**
  - **Başlık (H1):** `text-2xl font-bold text-textPrimary`
  - **Alt Başlık (H2):** `text-xl font-semibold text-textPrimary`
  - **Gövde Metni:** `text-base text-textSecondary`
  - **Okunabilirlik:** Sade ve net fontlar (Sistem fontları yeterlidir).

### 2.4. İkonlar (Icons)
- **Kütüphane:** `react-native-vector-icons` veya `expo-vector-icons` kullanılacaktır.
- **Stil:** Kategoriler ve menüler için sade, çizgi (outline) stili ikonlar tercih edilecektir.

### 2.5. Ekranlara Özel Kurallar
- **Kayıt Ekranı (`RegisterScreen`):**
  - **Yapı:** Dikey (`flex-col`), ortalanmış bir form.
  - **İçerik:** Uygulama logosu, "Hesap Oluştur" başlığı, Ad/Soyad, E-posta, Şifre inputları ve ekranın alt kısmına yakın, tam genişlikte büyük bir "Kayıt Ol" butonu.
- **Kategori Ekranı (`CategoriesScreen`):**
  - **Yapı:** İki sütunlu bir grid (`grid grid-cols-2 gap-4`).
  - **İçerik:** Her bir kategori, içinde büyük bir ikon, kategori adı ve o kategorideki ürün sayısını belirten küçük bir etiket içeren, farklı ve canlı arkaplan renklerine sahip bir kart ile temsil edilir.

---

## 3. Veri Yönetimi Mimarisi (Services ve Hooks)

Veri akışı her zaman **Component -> Hook -> Service -> Supabase** şeklinde olmalıdır. Bu, sorumlulukların ayrılmasını sağlar.

- **`src/services`:** Sadece Supabase ile konuşan, `async` fonksiyonlar içerir.
- **`src/hooks`:** `services`'ı kullanarak veri çeker ve `loading`, `error`, `data` state'lerini yönetir.
- **Component'ler:** Sadece `hooks`'ları kullanarak veriye erişir.

## 4. Supabase Kurulumu ve Şema

- **Client:** `src/lib/supabase.ts` dosyasında oluşturulur.
- **Tiplendirme:** `npx supabase gen types...